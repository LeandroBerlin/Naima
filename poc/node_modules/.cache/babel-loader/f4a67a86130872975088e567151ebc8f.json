{"ast":null,"code":"import _regeneratorRuntime from \"/home/dci-pc-ubuntu72/Bru/hackaton_042919/Naima/Naima/poc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/dci-pc-ubuntu72/Bru/hackaton_042919/Naima/Naima/poc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as driver from \"bigchaindb-driver\";\nimport * as bip39 from \"bip39\";\nvar conn = new driver.Connection(process.env.REACT_APP_BIGCHAINDB_API);\nvar keyPair = generateKeypair(\"Naima-Client\");\n/**\n * Create a transaction\n * @param {string} project - The donation project\n * @param {number} amount - The amount of the donation\n * @param {string} message - A message\n * @returns {tx} The transaction data\n */\n\nexport function createTransaction(_x, _x2, _x3) {\n  return _createTransaction.apply(this, arguments);\n}\n\nfunction _createTransaction() {\n  _createTransaction = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(project, amount, message) {\n    var transaction, txSigned, tx, hashMsg;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            transaction = driver.Transaction.makeCreateTransaction( // assets - define the asset to store, the project\n            {\n              project: project,\n              issued: \"Naima-Poc\"\n            }, // Metadata contains information about the transaction\n            {\n              action: \"Donation\",\n              amount: amount,\n              message: message,\n              date: Date.now()\n            }, // A transaction needs an output\n            [driver.Transaction.makeOutput( // A transaction has a condition\n            driver.Transaction.makeEd25519Condition(keyPair.publicKey))], // Signature to use\n            keyPair.publicKey);\n            txSigned = driver.Transaction.signTransaction(transaction, keyPair.privateKey);\n            _context.prev = 2;\n            _context.next = 5;\n            return conn.postTransaction(txSigned);\n\n          case 5:\n            tx = _context.sent;\n            hashMsg = \"transaction hash: \".concat(tx.id);\n            console.log(hashMsg);\n            console.log(tx);\n            return _context.abrupt(\"return\", tx);\n\n          case 12:\n            _context.prev = 12;\n            _context.t0 = _context[\"catch\"](2);\n            console.log(\"Error!\");\n            console.error(_context.t0);\n            return _context.abrupt(\"return\", false);\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this, [[2, 12]]);\n  }));\n  return _createTransaction.apply(this, arguments);\n}\n\nexport function getTransaction(_x4) {\n  return _getTransaction.apply(this, arguments);\n}\n\nfunction _getTransaction() {\n  _getTransaction = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(hash) {\n    var tx, hashMsg;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return conn.getTransaction(hash);\n\n          case 3:\n            tx = _context2.sent;\n            hashMsg = \"transaction hash: \".concat(tx.id);\n            console.log(hashMsg);\n            console.log(tx);\n            return _context2.abrupt(\"return\", tx);\n\n          case 10:\n            _context2.prev = 10;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log(\"Error!\");\n            console.error(_context2.t0);\n            return _context2.abrupt(\"return\", false);\n\n          case 15:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this, [[0, 10]]);\n  }));\n  return _getTransaction.apply(this, arguments);\n}\n\nexport function getHistory(_x5) {\n  return _getHistory.apply(this, arguments);\n}\n\nfunction _getHistory() {\n  _getHistory = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3(hash) {\n    var listHistory;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            _context3.next = 3;\n            return conn.listTransactions(hash);\n\n          case 3:\n            listHistory = _context3.sent;\n            console.log(listHistory);\n            return _context3.abrupt(\"return\", listHistory);\n\n          case 8:\n            _context3.prev = 8;\n            _context3.t0 = _context3[\"catch\"](0);\n            console.log(\"Error!\");\n            console.error(_context3.t0);\n            return _context3.abrupt(\"return\", false);\n\n          case 13:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, this, [[0, 8]]);\n  }));\n  return _getHistory.apply(this, arguments);\n}\n\nexport function getTransactions() {\n  return _getTransactions.apply(this, arguments);\n}\n/**\n * Update the asset by issuing a TRANSFER transaction with metadata containing the action performed on the asset.\n *\n * @param {*} transaction - The transaction that needs to be chained upon.\n * @param {*} action - The action performed on the asset (e.g. processed with preservative).\n */\n\nfunction _getTransactions() {\n  _getTransactions = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee4() {\n    var listOutputs;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.prev = 0;\n            _context4.next = 3;\n            return conn.searchAssets(\"Save the Oceans\");\n\n          case 3:\n            listOutputs = _context4.sent;\n            console.log(listOutputs);\n            return _context4.abrupt(\"return\", listOutputs);\n\n          case 8:\n            _context4.prev = 8;\n            _context4.t0 = _context4[\"catch\"](0);\n            console.log(\"Error!\");\n            console.error(_context4.t0);\n            return _context4.abrupt(\"return\", false);\n\n          case 13:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, this, [[0, 8]]);\n  }));\n  return _getTransactions.apply(this, arguments);\n}\n\nexport function updateTransaction(_x6, _x7) {\n  return _updateTransaction.apply(this, arguments);\n}\n/**\n * Generate a keypair based on the supplied seed string.\n * @param {string} keySeed - The seed that should be used to generate the keypair.\n * @returns {*} The generated keypair.\n */\n\nfunction _updateTransaction() {\n  _updateTransaction = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee5(transaction, action) {\n    var updatedMeta, updateTransaction, txSigned, tx, hashMsg;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            console.log(transaction);\n            updatedMeta = {\n              action: action,\n              date: new Date().toISOString()\n            };\n            updateTransaction = driver.Transaction.makeTransferTransaction( // 1- Previous transaction.\n            [{\n              tx: transaction,\n              output_index: 0\n            }], // 2- new output\n            [driver.Transaction.makeOutput(driver.Transaction.makeEd25519Condition(keyPair.publicKey))], // 3- new metadata.\n            updatedMeta);\n            txSigned = driver.Transaction.signTransaction(updateTransaction, keyPair.privateKey);\n            _context5.prev = 4;\n            _context5.next = 7;\n            return conn.postTransactionCommit(txSigned);\n\n          case 7:\n            tx = _context5.sent;\n            hashMsg = \"transaction hash: \".concat(tx.id);\n            console.log(hashMsg);\n            console.log(tx);\n            return _context5.abrupt(\"return\", tx);\n\n          case 14:\n            _context5.prev = 14;\n            _context5.t0 = _context5[\"catch\"](4);\n            console.log(\"Error!\");\n            console.error(_context5.t0);\n            return _context5.abrupt(\"return\", false);\n\n          case 19:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5, this, [[4, 14]]);\n  }));\n  return _updateTransaction.apply(this, arguments);\n}\n\nfunction generateKeypair(keySeed) {\n  if (typeof keySeed === \"undefined\" || keySeed === \"\") return new driver.Ed25519Keypair();\n  return new driver.Ed25519Keypair(bip39.mnemonicToSeed(keySeed).slice(0, 32));\n}","map":{"version":3,"sources":["/home/dci-pc-ubuntu72/Bru/hackaton_042919/Naima/Naima/poc/src/components/Bigchaindb.js"],"names":["driver","bip39","conn","Connection","process","env","REACT_APP_BIGCHAINDB_API","keyPair","generateKeypair","createTransaction","project","amount","message","transaction","Transaction","makeCreateTransaction","issued","action","date","Date","now","makeOutput","makeEd25519Condition","publicKey","txSigned","signTransaction","privateKey","postTransaction","tx","hashMsg","id","console","log","error","getTransaction","hash","getHistory","listTransactions","listHistory","getTransactions","searchAssets","listOutputs","updateTransaction","updatedMeta","toISOString","makeTransferTransaction","output_index","postTransactionCommit","keySeed","Ed25519Keypair","mnemonicToSeed","slice"],"mappings":"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","sourcesContent":["import * as driver from \"bigchaindb-driver\";\nimport * as bip39 from \"bip39\";\n\nconst conn = new driver.Connection(process.env.REACT_APP_BIGCHAINDB_API);\nconst keyPair = generateKeypair(\"Naima-Client\");\n\n/**\n * Create a transaction\n * @param {string} project - The donation project\n * @param {number} amount - The amount of the donation\n * @param {string} message - A message\n * @returns {tx} The transaction data\n */\n\nexport async function createTransaction(project, amount, message) {\n  const transaction = driver.Transaction.makeCreateTransaction(\n    // assets - define the asset to store, the project\n    { project: project, issued: \"Naima-Poc\" },\n\n    // Metadata contains information about the transaction\n    { action: \"Donation\", amount: amount, message: message, date: Date.now() },\n\n    // A transaction needs an output\n    [\n      driver.Transaction.makeOutput(\n        // A transaction has a condition\n        driver.Transaction.makeEd25519Condition(keyPair.publicKey)\n      )\n    ],\n    // Signature to use\n    keyPair.publicKey\n  );\n\n  const txSigned = driver.Transaction.signTransaction(\n    transaction,\n    keyPair.privateKey\n  );\n\n  try {\n    let tx = await conn.postTransaction(txSigned);\n    let hashMsg = `transaction hash: ${tx.id}`;\n    console.log(hashMsg);\n    console.log(tx);\n    return tx;\n  } catch (error) {\n    console.log(\"Error!\");\n    console.error(error);\n    return false;\n  }\n}\n\nexport async function getTransaction(hash) {\n  try {\n    let tx = await conn.getTransaction(hash);\n    let hashMsg = `transaction hash: ${tx.id}`;\n    console.log(hashMsg);\n    console.log(tx);\n    return tx;\n  } catch (error) {\n    console.log(\"Error!\");\n    console.error(error);\n    return false;\n  }\n}\n\nexport async function getHistory(hash) {\n  try {\n    let listHistory = await conn.listTransactions(hash);\n    console.log(listHistory);\n    return listHistory;\n  } catch (error) {\n    console.log(\"Error!\");\n    console.error(error);\n    return false;\n  }\n}\n\nexport async function getTransactions() {\n  try {\n    let listOutputs = await conn.searchAssets(\"Save the Oceans\");\n    console.log(listOutputs);\n    return listOutputs;\n  } catch (error) {\n    console.log(\"Error!\");\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Update the asset by issuing a TRANSFER transaction with metadata containing the action performed on the asset.\n *\n * @param {*} transaction - The transaction that needs to be chained upon.\n * @param {*} action - The action performed on the asset (e.g. processed with preservative).\n */\n\nexport async function updateTransaction(transaction, action) {\n  console.log(transaction);\n  const updatedMeta = {\n    action: action,\n    date: new Date().toISOString()\n  };\n\n  const updateTransaction = driver.Transaction.makeTransferTransaction(\n    // 1- Previous transaction.\n    [{ tx: transaction, output_index: 0 }],\n\n    // 2- new output\n    [\n      driver.Transaction.makeOutput(\n        driver.Transaction.makeEd25519Condition(keyPair.publicKey)\n      )\n    ],\n\n    // 3- new metadata.\n    updatedMeta\n  );\n\n  const txSigned = driver.Transaction.signTransaction(\n    updateTransaction,\n    keyPair.privateKey\n  );\n\n  try {\n    let tx = await conn.postTransactionCommit(txSigned);\n    let hashMsg = `transaction hash: ${tx.id}`;\n    console.log(hashMsg);\n    console.log(tx);\n    return tx;\n  } catch (error) {\n    console.log(\"Error!\");\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Generate a keypair based on the supplied seed string.\n * @param {string} keySeed - The seed that should be used to generate the keypair.\n * @returns {*} The generated keypair.\n */\nfunction generateKeypair(keySeed) {\n  if (typeof keySeed === \"undefined\" || keySeed === \"\")\n    return new driver.Ed25519Keypair();\n  return new driver.Ed25519Keypair(bip39.mnemonicToSeed(keySeed).slice(0, 32));\n}\n"]},"metadata":{},"sourceType":"module"}